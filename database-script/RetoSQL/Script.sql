CREATE DATABASE PERSONAL

CREATE TABLE AREA (
    ID_AREA INT NOT NULL,
    DESCRIPCION VARCHAR2(50) NOT NULL,
    CONSTRAINT PK_ID_AREA PRIMARY KEY (ID_AREA) 
);

CREATE TABLE ZONA (
    ID_ZONA INT NOT NULL,
    DESCRIPCION VARCHAR2(50) NOT NULL,
    CONSTRAINT PK_ID_ZONA PRIMARY KEY (ID_ZONA) 
);

CREATE TABLE PUESTO(
    ID_PUESTO INT NOT NULL,
    DESCRIPCION VARCHAR2(50),
    CONSTRAINT PK_ID_PUESTO PRIMARY KEY(ID_PUESTO)
);

CREATE TABLE PERSONAS(
    ID_PERSONA INT NOT NULL, /*POR MODELADO CREE UN ID PARA HACER LAS COMPARACIONES M√ÅS SIMPLES*/
    NOMBRE VARCHAR(100) NOT NULL,
    NO_CONTROL INT NOT NULL, /*CAMBIE EL CAMPO DE LOGIN POR NO_CONTROL PORQUE SERIA CONFUSO LO DE LOGIN, YA QUE PODRIAMOS USARLO EN OTRO TERMINO*/
    ID_AREA INT NOT NULL,
    ID_ZONA INT NOT NULL,
    ID_PUESTO INT NOT NULL,
    CONSTRAINT PK_PERSONA PRIMARY KEY (ID_PERSONA),
    CONSTRAINT UQ_NO_CONTROL UNIQUE (NO_CONTROL),
    CONSTRAINT FK_ID_AREA_AREA FOREIGN KEY (ID_AREA) REFERENCES AREA(ID_AREA),
    CONSTRAINT FK_ID_ZONA_ZONA FOREIGN KEY (ID_ZONA) REFERENCES ZONA(ID_ZONA),
    CONSTRAINT FK_ID_PUESTO_PUESTO FOREIGN KEY (ID_PUESTO) REFERENCES PUESTO(ID_PUESTO)
);

COMMIT;

/*CREACION DE LA SECUENCIA */
CREATE SEQUENCE SEQ_AREA
START WITH 1 
INCREMENT BY 1
NOCYCLE /*PARAMETRO PARA EVITAR QUE LA SECUENCIA SE REINICIE*/
NOCACHE; /*PARAMETRO PARA EVITAR GUARDAR VALORES EN MEMORIA Y EVITA LA PERDIDA DE CONTEO*/

CREATE SEQUENCE SEQ_ZONA
START WITH 1
INCREMENT BY 1
NOCYCLE /*PARAMETRO PARA EVITAR QUE LA SECUENCIA SE REINICIE*/
NOCACHE; /*PARAMETRO PARA EVITAR GUARDAR VALORES EN MEMORIA Y EVITA LA PERDIDA DE CONTEO*/

CREATE SEQUENCE SEQ_PUESTO
START WITH 1
INCREMENT BY 1
NOCYCLE /*PARAMETRO PARA EVITAR QUE LA SECUENCIA SE REINICIE*/
NOCACHE; /*PARAMETRO PARA EVITAR GUARDAR VALORES EN MEMORIA Y EVITA LA PERDIDA DE CONTEO*/

CREATE SEQUENCE SEQ_PERSONAS
START WITH 1
INCREMENT BY 1
NOCYCLE /*PARAMETRO PARA EVITAR QUE LA SECUENCIA SE REINICIE*/
NOCACHE; /*PARAMETRO PARA EVITAR GUARDAR VALORES EN MEMORIA Y EVITA LA PERDIDA DE CONTEO*/

COMMIT;

/*ALTERA LA TABLA PARA SELECCIONAR POR DEFECTO LOS VALORES AUTOINCREMENTABLE*/
ALTER TABLE AREA
    MODIFY ID_AREA DEFAULT SEQ_AREA.NEXTVAL;

ALTER TABLE ZONA
    MODIFY ID_ZONA DEFAULT SEQ_ZONA.NEXTVAL;

ALTER TABLE PUESTO
    MODIFY ID_PUESTO DEFAULT SEQ_PUESTO.NEXTVAL;

ALTER TABLE PERSONAS
    MODIFY ID_PERSONA DEFAULT SEQ_PERSONAS.NEXTVAL;

COMMIT;

/*3. QUERY */
/*QUERY PARA TRAER TODOS LOS COORDINADORES*/

SELECT PERSONAS.NOMBRE, PUESTO.DESCRIPCION 
FROM PERSONAS  
JOIN PUESTO ON PUESTO.ID_PUESTO = PERSONAS.ID_PUESTO
WHERE UPPER(PUESTO.DESCRIPCION) = 'COORDINADOR';

SELECT P.ID_PERSONA, P.NOMBRE, PU.DESCRIPCION AS PUESTO
FROM PERSONAS P
JOIN PUESTO PU ON P.ID_PUESTO = PU.ID_PUESTO
WHERE UPPER(PU.DESCRIPCION) = 'COORDINADOR';

/*3.2 MOSTRAR A TODAS LAS PERSONAS QUE LABOREN EN LA ZONA DEL VALLE */
SELECT PERSONAS.NOMBRE, ZONA.DESCRIPCION
FROM PERSONAS
JOIN ZONA ON ZONA.ID_ZONA = PERSONAS.ID_ZONA
WHERE UPPER(ZONA.DESCRIPCION) = 'DEL VALLE';

/*3.3 MOSTRAR A TODAS LAS PERSONAS QUE LABOREN EN LA ZONA DEL VALLE */
SELECT PERSONAS.NOMBRE, PUESTO.DESCRIPCION
FROM PERSONAS
JOIN PUESTO ON PUESTO.ID_PUESTO = PERSONAS.ID_PUESTO 
WHERE PUESTO.DESCRIPCION = 'EMPLEADO';

/*3.4  AGRUPAR TODAS LAS PERSONAS POR AREA */
SELECT AREA.DESCRIPCION AS AREA, COUNT(*) AS TOTAL_PERSONAS
FROM PERSONAS
JOIN AREA ON PERSONAS.ID_AREA = AREA.ID_AREA
WHERE AREA.ID_AREA = PERSONAS.ID_AREA
GROUP BY AREA.DESCRIPCION

/*CON UN CRUCE OBTENER EL SIGUIENTE RESULTADO*/
//3.4 CON UN CRUCE OBTENER EL SIGUIENTE RESULTADO
SELECT PERSONAS.NOMBRE, 
    PERSONAS.NO_CONTROL AS LOGIN,
    AREA.DESCRIPCION AS AREA, 
    ZONA.DESCRIPCION AS ZONA, 
    PUESTO.DESCRIPCION AS PUESTO
FROM PERSONAS
JOIN AREA ON AREA.ID_AREA = PERSONAS.ID_AREA
JOIN ZONA ON ZONA.ID_ZONA = PERSONAS.ID_ZONA
JOIN PUESTO ON PUESTO.ID_PUESTO = PERSONAS.ID_PUESTO


/*CREAR UN SP CON UN PARAMETRO DE ENTRADA @IDZONA QUE MUESTRE TODOS LAS PERSONAS 
DE LA ZONA INDICADA EN EL PARAMETRO. */
CREATE OR REPLACE PROCEDURE SP_PERSONAS_ZONA (P_ID_ZONA IN NUMBER) 
AS
BEGIN
    SELECT PERSONAS.ID_PERSONA, PERSONAS.NOMBRE, ZONA.DESCRIPCION AS ZONA
    FROM PERSONAS 
    JOIN ZONA ON PERSONAS.ID_ZONA = ZONA.ID_ZONA
    WHERE ZONA.ID_ZONA = P_ID_ZONA;
END;
/

